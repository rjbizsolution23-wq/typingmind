openapi: 3.0.3
info:
  title: RJ Business Solutions AI Chat API Documentation
  version: 1.2.0
  description: "
    <h5 class='mt-8 mb-2'><b>RJ Business Solutions AI Chat Platform API</b></h5>
    <p>Enterprise-grade AI chat interface by Rick Jefferson, AI Systems Architect</p>
    <h5 class='mt-8 mb-2'><b>Contact Information:</b></h5>
    <ul class='list-disc mt-2 ml-4'>
      <li>Email: <code>rick@rjbizsolution.com</code></li>
      <li>Phone: <code>+1 877-561-8001</code></li>
      <li>Website: <code>rjbusiness.io</code></li>
    </ul>
    <h5 class='mt-8 mb-2'><b>How to use the API:</b></h5>
    <ol class='list-decimal mt-2'>
      <li>Contact Rick Jefferson for API access and enterprise licensing.</li>
      <li>When making a request, include the API key in the request headers as <code>X-API-KEY</code>.</li>
    </ol>
  "

servers:
  - url: https://rjbusiness.io/api

tags:
  - name: Users V2
  - name: Agent Chat
  - name: Audit Logs
  - name: Groups
  - name: Roles
  - name: Characters
  - name: Chat
  - name: Chatlogs
  - name: Users

paths:
  /v2/users:
    get:
      operationId: getUsersV2
      tags:
        - Users V2
      summary: Get all users in your chat instance
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email of the user
          example: email%40example.com

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/UserV2'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    post:
      operationId: addUserV2
      tags:
        - Users V2
      summary: Add a user to your chat instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: email@example.com
                groups:
                  type: array
                  items:
                    type: string
                  example: ['group-id-1', 'group-id-2']
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/users/{id}:
    get:
      operationId: getUserV2
      tags:
        - Users V2
      summary: Get user information by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    delete:
      operationId: deleteUserV2
      tags:
        - Users V2
      summary: Remove a user from your chat instance
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    patch:
      operationId: updateUserV2
      tags:
        - Users V2
      summary: Update a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    type: string
                  example: ['group-id-1', 'group-id-2']
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/agents/{agent_id}/chat:
    post:
      summary: Send a chat message to an agent and receive a response.
      description: '<br>
      Use this endpoint to create a chat conversation with an AI agent you have created in the Admin Panel. This endpoint will execute any plugins, knowledge bases, or MCP servers enabled by the AI agent in the background and return the final response.
      <br><br>
      In the request body, specify the chat history in the "messages" array. The API will return the agent''s response as an array of new messages. Note that the resulting messages array may contain multiple items if the agent decides to use any plugins or other tools during the process.
      <br><br>
      To continue a conversation, simply append the "messages" you received in the previous response to the next request in the request body.
      <br>'
      tags:
        - Agent Chat
      operationId: agentChat
      parameters:
        - in: path
          name: agent_id
          required: true
          schema:
            type: string
          description: The agent's unique identifier (UUID).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  description: Chat messages in conversational order.
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum: [user, assistant, tool]
                      content:
                        oneOf:
                          - type: string
                          - type: array
                            items:
                              oneOf:
                                - type: object
                                  properties:
                                    type:
                                      type: string
                                      enum: [text]
                                    text:
                                      type: string
                                  required: [type, text]
                                - type: object
                                  properties:
                                    type:
                                      type: string
                                      enum: [image_url]
                                    image_url:
                                      type: object
                                      required: [url]
                                      properties:
                                        url:
                                          type: string
                                          format: uri
                                        detail:
                                          type: string
                                          enum: [low, high]
                                          description: Optional image detail level
                                  required: [type, image_url]
                        nullable: true
                        description: String or array of content blocks.
                      tool_calls:
                        type: array
                        nullable: true
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            type:
                              type: string
                              enum: [function]
                            function:
                              type: object
                              properties:
                                name:
                                  type: string
                                arguments:
                                  type: string
                      tool_call_id:
                        type: string
                        nullable: true
                        description: Tool call ID when responding as a tool
                      name:
                        type: string
                        nullable: true
                        description: Tool name when responding as a tool

      responses:
        '200':
          description: Successful chat completion with the agent
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    description: List of assistant or tool messages in response
                    items:
                      type: object
                      properties:
                        role:
                          type: string
                          enum: [assistant, tool]
                        content:
                          oneOf:
                            - type: string
                            - type: array
                              items:
                                oneOf:
                                  - type: object
                                    properties:
                                      type:
                                        type: string
                                        enum: [text]
                                      text:
                                        type: string
                                    required: [type, text]
                                  - type: object
                                    properties:
                                      type:
                                        type: string
                                        enum: [image_url]
                                      image_url:
                                        type: object
                                        required: [url]
                                        properties:
                                          url:
                                            type: string
                                            format: uri
                                          detail:
                                            type: string
                                            enum: [low, high]
                                            description: Optional image detail level
                                    required: [type, image_url]
                        tool_calls:
                          type: array
                          nullable: true
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              type:
                                type: string
                                enum: [function]
                              function:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  arguments:
                                    type: string
                        tool_call_id:
                          type: string
                          nullable: true
                        name:
                          type: string
                          nullable: true

        '400':
          description: Invalid request
        '401':
          description: Unauthorized (invalid or missing API key)
        '404':
          description: Agent not found

      security:
        - ApiKeyAuth: []

  /v2/audit-logs:
    get:
      operationId: getAuditLogs
      tags:
        - Audit Logs
      summary: Get audit logs in your chat instance
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          description: Number of logs per page
          example: 25

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  hasMore:
                    type: boolean
                    description: Whether there are more logs available
                    example: true
                  page:
                    type: integer
                    description: Current page number
                    example: 1
                  total:
                    type: integer
                    description: Total number of audit logs
                    example: 150
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/groups:
    get:
      operationId: getGroups
      tags:
        - Groups
      summary: Get all groups in your chat instance

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Group'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    post:
      operationId: addGroup
      tags:
        - Groups
      summary: Add a new group to your chat instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Marketing Department
                  required: true
                roles:
                  type: array
                  items:
                    type: string
                  example: ['role-id-1', 'role-id-2']
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithRoles'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/groups/{id}:
    get:
      operationId: getGroup
      tags:
        - Groups
      summary: Get group information by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the group
          example: group-id
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithRoles'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    patch:
      operationId: updateGroup
      tags:
        - Groups
      summary: Update a group
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the group
          example: group-id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - type: object
                  required: ['title']
                  properties:
                    title:
                      type: string
                      example: Marketing Department
                - type: object
                  required: ['roles']
                  properties:
                    roles:
                      type: array
                      items:
                        type: string
                      example: ['role-id-1', 'role-id-2']
                - type: object
                  required: ['title', 'roles']
                  properties:
                    title:
                      type: string
                      example: Marketing Department
                    roles:
                      type: array
                      items:
                        type: string
                      example: ['role-id-1', 'role-id-2']
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithRoles'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/roles:
    get:
      operationId: getRoles
      tags:
        - Roles
      summary: Get all roles in your chat instance

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/users:
    post:
      operationId: addUser
      tags:
        - Users
      summary: Add a user to your chat instance
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: email@example.com
                tags:
                  type: array
                  items:
                    type: string
                  example: ['tag1', 'tag2']
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    get:
      operationId: getUsers
      tags:
        - Users
      summary: Get all users in your chat instance
      deprecated: true
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email of the user
          example: email%40example.com

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/users/{id}:
    get:
      operationId: getUser
      tags:
        - Users
      summary: Get user information by ID
      deprecated: true
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    delete:
      operationId: deleteUser
      tags:
        - Users
      summary: Remove a user from your chat instance
      deprecated: true
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    patch:
      operationId: updateUser
      tags:
        - Users
      summary: Update a user
      deprecated: true
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                  example: ['tag1', 'tag2']
        required: true
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/ai-characters:
    get:
      operationId: getCharacters
      tags:
        - Characters
      summary: Get all AI characters in your chat instance

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Character'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/chat/completions:
    post:
      operationId: createChatCompletions
      tags:
        - Chat
      deprecated: true
      summary: Create a model response for the given chat conversation

      requestBody:
        description: '<br>Find more information about the request body here:<br>
          <a href="https://platform.openai.com/docs/api-reference/chat/create" target="_blank">OpenAI API Reference</a><br>
          <a href="https://docs.anthropic.com/en/api/messages#body-model" target="_blank">Anthropic API Reference</a><br>
          <a href="https://ai.google.dev/gemini-api/docs/text-generation?lang=rest" target="_blank">Google Gemini API Reference</a><br><br>
          For additional configuration options, refer to the properties below:<br>'


        content:
          application/json:
            schema:
              type: object
              properties:
                activatedCharacterID:
                  type: string
                  description: AI character for this completion

              example:
                model: 'gpt-4o'
                stream: true
                messages:
                  [
                    {
                      'role': 'system',
                      'content': 'You are a helpful AI assistant.',
                    },
                    { 'role': 'user', 'content': 'hi' },
                  ]

        required: true

      responses:
        '200':
          description: OK

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/chatlogs:
    get:
      operationId: getChatlogs
      tags:
        - Chatlogs
      summary: Get chat logs in your chat instance
      parameters:
        - in: query
          name: startUnixTime
          schema:
            type: number
          description: Unix time of the start time
          example: 1640995200
        - in: query
          name: endUnixTime
          schema:
            type: number
          description: Unix time of the end time
          example: 1640995200
        - in: query
          name: userID
          schema:
            type: number
          description: Filter by userID
          example: 123456
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: offset
          schema:
            type: number
            example: 0

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Chatlog'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []


components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 123456
        email:
          type: string
          example: email@example.com
        createdAt:
          type: string
        tags:
          type: array
          items:
            type: string
          example: ['tag1', 'tag2']
    UserV2:
      type: object
      properties:
        id:
          type: string
          example: 123456
        email:
          type: string
          example: email@example.com
        createdAt:
          type: string
        groups:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
            example: [{
              id: 'group-id-1',
              name: 'Group 1',
            }]
    Character:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        instruction:
          type: string
        defaultModel:
          type: string
        createdAt:
          type: string
    Chatlog:
      type: object
      properties:
        chatID:
          type: string
          example: 'U9H8EEJpLL'
        chatTitle:
          type: string
          example: 'Chat with an AI assistant'
        createdAt:
          type: string
          example: '2024-08-14T04:18:53.000Z'
        recordedAt:
          type: string
          example: '2024-08-14T04:18:53.000Z'
        conversationText:
          type: string
          example: 'User: Hello\n\nAssistant: Hi there!'
        userID:
          type: string
          example: 123
        model:
          type: string
          example: 'GPT-4o'
        agents:
          type: array
          items:
            type: string
          example: ['Pro Coder', 'Tech Writer']
        plugins:
          type: array
          items:
            type: string
          example: ['Render Chart', 'Google Calendar']
    Group:
      type: object
      properties:
        id:
          type: string
          example: 'group-id-1'
        title:
          type: string
          example: 'Marketing Department'
    GroupWithRoles:
      type: object
      properties:
        id:
          type: string
          example: 'group-id-1'
        title:
          type: string
          example: 'Marketing Department'
        roles:
          type: array
          items:
            type: string
          example: ['role-id-1', 'role-id-2']
    Role:
      type: object
      properties:
        id:
          type: string
          example: 'role-id-1'
        title:
          type: string
          example: 'Content Manager'
    AuditLog:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the audit log entry
          example: 123456
        entity:
          type: string
          description: Type of entity that was modified
          example: "agent"
        entityName:
          type: string
          description: Name or identifier of the specific entity
          example: "Marketing Specialist"
        action:
          type: string
          description: Action that was performed
          example: "create"
        recordedAt:
          type: string
          format: date-time
          description: When the action was recorded
          example: "2024-08-14T04:18:53.000Z"
        userID:
          type: integer
          nullable: true
          description: ID of the user who performed the action (null if user was deleted)
          example: 123456
